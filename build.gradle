plugins {
    id 'dev.architectury.loom' version '0.11.0-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.+'
    id 'maven-publish'
}

var modName = property("modName")
var modId = property("modId")
var modVersion = property("modVersion")
var mcVersion = property("mcVersion")

version = "$mcVersion-$modVersion"
group = property("group")

repositories {
    maven {
        name = "vram"
        url = "https://maven.vram.io/"
    }
    maven { url = "https://ldtteam.jfrog.io/ldtteam/modding/" }
        maven { url = "https://maven.tehnut.info" }
        maven {
            url "https://www.cursemaven.com"
            content {
                includeGroup("curse.maven")
            }
        }
        maven { url = "https://harleyoconnor.com/maven" }
        maven { url = "https://squiddev.cc/maven/" }
        maven {
                // Location of the maven that hosts JEI files (and TiC)
                name 'Progwml6 maven'
                url 'https://dvs1.progwml6.com/files/maven'
            }
}

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
                "examplemod.mixins.json"
        ]

        dataGen {
            mod project.modId
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    forge "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
    minecraft "com.mojang:minecraft:${mcVersion}"

    mappings loom.officialMojangMappings()

    // Compile Hwyla API, but don"t include in runtime.
        compileOnly("mcp.mobius.waila:Hwyla:${property("hwylaVersion")}:api")
        // At runtime, use the full Hwyla mod.
        runtimeOnly("mcp.mobius.waila:Hwyla:${property("hwylaVersion")}")

        // Compile JEI API, but don"t include in runtime.
        modCompileOnly("mezz.jei:jei-$mcVersion:${property("jeiVersion")}:api")
        // At runtime, use the full JEI mod.
        modRuntimeOnly("mezz.jei:jei-$mcVersion:${property("jeiVersion")}")

        // At runtime, use Patchouli mod (for the guide book, which is Json so we don"t need the API).
        runtimeOnly("vazkii.patchouli:Patchouli:${property("patchouliVersion")}")

        // At runtime use, CC for creating growth chambers.
        //runtimeOnly("org.squiddev:cc-tweaked-$mcVersion:${property("ccVersion")}")
        runtimeOnly("curse.maven:cc-tweaked-282001:3236650")

        // Compile Serene Seasons.
        compileOnly("curse.maven:SereneSeasons-291874:3202233")

        // Compile Better Weather API.
        compileOnly("curse.maven:BetterWeatherAPI-400714:3403615")

    //    useSereneSeasons(this)
    //    useBetterWeather(this)

        // At runtime, use suggestion provider fix mod.
        //runtimeOnly("com.harleyoconnor.suggestionproviderfix:SuggestionProviderFix:$mcVersion-${property("suggestionProviderFixVersion")}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}